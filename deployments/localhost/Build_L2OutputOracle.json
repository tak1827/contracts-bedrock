{
  "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "l2OutputOracleSubmissionInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "l2BlockTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalizationPeriodSeconds",
          "type": "uint256"
        }
      ],
      "name": "deployBytecode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2825d16f2818506b83e8257d3ab072bf200c22e497dc8a9a0235c6153d0d9e94",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "transactionIndex": 0,
    "gasUsed": "1583249",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb991dbded8e0680ec2816fc2258a131636e70ccae2109b9222a6eb37967ee4bf",
    "transactionHash": "0x2825d16f2818506b83e8257d3ab072bf200c22e497dc8a9a0235c6153d0d9e94",
    "logs": [],
    "blockNumber": 15,
    "cumulativeGasUsed": "1583249",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a59b28bf75faade9a91b10b17d788d3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"l2OutputOracleSubmissionInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2BlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalizationPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"deployBytecode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployBytecode(uint256,uint256,uint256)\":{\"notice\":\"The create2 salt used for deployment of the contract implementations.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"Hold the deployment bytecode         Separate from build contract to avoid bytecode size limitations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oasys/L1Build/Build_L2OutputOracle.sol\":\"Build_L2OutputOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function powWad(int256 x, int256 y) internal pure returns (int256) {\\n        // Equivalent to x to the power of y because x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)\\n        return expWad((lnWad(x) * y) / int256(WAD)); // Using ln(x) means x must be greater than 0.\\n    }\\n\\n    function expWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is < 0.5 we return zero. This happens when\\n            // x <= floor(log(0.5e18) * 1e18) ~ -42e18\\n            if (x <= -42139678854452767551) return 0;\\n\\n            // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\\n            // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\\n            if (x >= 135305999368893231589) revert(\\\"EXP_OVERFLOW\\\");\\n\\n            // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5**18;\\n\\n            // Reduce range of x to (-\\u00bd ln 2, \\u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // k is in the range [-61, 195].\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // p is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range (0.09, 0.25) * 2**96.\\n\\n            // We now need to multiply r by:\\n            // * the scale factor s = ~6.031367120.\\n            // * the 2**k factor from the range reduction.\\n            // * the 1e18 / 2**96 factor for base conversion.\\n            // We do this all at once, with an intermediate result in 2**213\\n            // basis, so the final right shift is always by a positive amount.\\n            r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k));\\n        }\\n    }\\n\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            require(x > 0, \\\"UNDEFINED\\\");\\n\\n            // We want to convert x from 10**18 fixed point to 2**96 fixed point.\\n            // We do this by multiplying by 2**96 / 10**18. But since\\n            // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\\n            // and add ln(2**96 / 10**18) at the end.\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            int256 k = int256(log2(uint256(x))) - 96;\\n            x <<= uint256(159 - k);\\n            x = int256(uint256(x) >> 159);\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // p is made monic, we will multiply by a scale factor later.\\n            int256 p = x + 3273285459638523848632254066296;\\n            p = ((p * x) >> 96) + 24828157081833163892658089445524;\\n            p = ((p * x) >> 96) + 43456485725739037958740375743393;\\n            p = ((p * x) >> 96) - 11111509109440967052023855526967;\\n            p = ((p * x) >> 96) - 45023709667254063763336534515857;\\n            p = ((p * x) >> 96) - 14706773417378608786704636184526;\\n            p = p * x - (795164235651350426258249787498 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            // q is monic by convention.\\n            int256 q = x + 5573035233440673466300451813936;\\n            q = ((q * x) >> 96) + 71694874799317883764090561454958;\\n            q = ((q * x) >> 96) + 283447036172924575727196451306956;\\n            q = ((q * x) >> 96) + 401686690394027663651624208769553;\\n            q = ((q * x) >> 96) + 204048457590392012362485061816622;\\n            q = ((q * x) >> 96) + 31853899698501571402653359427138;\\n            q = ((q * x) >> 96) + 909429971244387300277376558375;\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial is known not to have zeros in the domain.\\n                // No scaling required because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r is in the range (0, 0.125) * 2**96\\n\\n            // Finalization, we need to:\\n            // * multiply by the scale factor s = 5.549\\u2026\\n            // * add ln(2**96 / 10**18)\\n            // * add k * ln(2)\\n            // * multiply by 10**18 / 2**96 = 5**18 >> 78\\n\\n            // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\\n            r *= 1677202110996718588342820967067443963516166;\\n            // add ln(2) * k * 5e18 * 2**192\\n            r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k;\\n            // add ln(2**96 / 10**18) * 5e18 * 2**192\\n            r += 600920179829731861736702779321621459595472258049074101567377883020018308;\\n            // base conversion: mul 2**18 / 2**192\\n            r >>= 174;\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        require(x > 0, \\\"UNDEFINED\\\");\\n\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            r := or(r, shl(2, lt(0xf, shr(r, x))))\\n            r := or(r, shl(1, lt(0x3, shr(r, x))))\\n            r := or(r, lt(0x1, shr(r, x)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x622fcd8a49e132df5ec7651cc6ae3aaf0cf59bdcd67a9a804a1b9e2485113b7d\",\"license\":\"MIT\"},\"contracts/L1/L2OutputOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { ISemver } from \\\"../universal/ISemver.sol\\\";\\nimport { Types } from \\\"../libraries/Types.sol\\\";\\n\\n/// @custom:proxied\\n/// @title L2OutputOracle\\n/// @notice The L2OutputOracle contains an array of L2 state outputs, where each output is a\\n///         commitment to the state of the L2 chain. Other contracts like the OptimismPortal use\\n///         these outputs to verify information about the state of L2.\\ncontract L2OutputOracle is Initializable, ISemver {\\n    /// @notice The interval in L2 blocks at which checkpoints must be submitted.\\n    ///         Although this is immutable, it can safely be modified by upgrading the\\n    ///         implementation contract.\\n    ///         Public getter is legacy and will be removed in the future. Use `submissionInterval`\\n    ///         instead.\\n    /// @custom:legacy\\n    uint256 public immutable SUBMISSION_INTERVAL;\\n\\n    /// @notice The time between L2 blocks in seconds. Once set, this value MUST NOT be modified.\\n    ///         Public getter is legacy and will be removed in the future. Use `l2BlockTime`\\n    ///         instead.\\n    /// @custom:legacy\\n    uint256 public immutable L2_BLOCK_TIME;\\n\\n    /// @notice The minimum time (in seconds) that must elapse before a withdrawal can be finalized.\\n    ///         Public getter is legacy and will be removed in the future. Use\\n    //          `finalizationPeriodSeconds` instead.\\n    /// @custom:legacy\\n    uint256 public immutable FINALIZATION_PERIOD_SECONDS;\\n\\n    /// @notice The number of the first L2 block recorded in this contract.\\n    uint256 public startingBlockNumber;\\n\\n    /// @notice The timestamp of the first L2 block recorded in this contract.\\n    uint256 public startingTimestamp;\\n\\n    /// @notice An array of L2 output proposals.\\n    Types.OutputProposal[] internal l2Outputs;\\n\\n    /// @notice The address of the challenger. Can be updated via reinitialize.\\n    /// @custom:network-specific\\n    address public challenger;\\n\\n    /// @notice The address of the proposer. Can be updated via reinitialize.\\n    /// @custom:network-specific\\n    address public proposer;\\n\\n    /// @notice Emitted when an output is proposed.\\n    /// @param outputRoot    The output root.\\n    /// @param l2OutputIndex The index of the output in the l2Outputs array.\\n    /// @param l2BlockNumber The L2 block number of the output root.\\n    /// @param l1Timestamp   The L1 timestamp when proposed.\\n    event OutputProposed(\\n        bytes32 indexed outputRoot, uint256 indexed l2OutputIndex, uint256 indexed l2BlockNumber, uint256 l1Timestamp\\n    );\\n\\n    /// @notice Emitted when outputs are deleted.\\n    /// @param prevNextOutputIndex Next L2 output index before the deletion.\\n    /// @param newNextOutputIndex  Next L2 output index after the deletion.\\n    event OutputsDeleted(uint256 indexed prevNextOutputIndex, uint256 indexed newNextOutputIndex);\\n\\n    /// @notice Semantic version -> comment out to activate oasys customized version\\n    /// @custom:semver 1.5.0\\n    string public constant version = \\\"1.5.0\\\";\\n\\n    /// @notice Constructs the L2OutputOracle contract.\\n    /// @param _submissionInterval  Interval in blocks at which checkpoints must be submitted.\\n    /// @param _l2BlockTime         The time per L2 block, in seconds.\\n    /// @param _finalizationPeriodSeconds The amount of time that must pass for an output proposal\\n    //                                    to be considered canonical.\\n    constructor(uint256 _submissionInterval, uint256 _l2BlockTime, uint256 _finalizationPeriodSeconds) {\\n        require(_l2BlockTime > 0, \\\"L2OutputOracle: L2 block time must be greater than 0\\\");\\n        require(_submissionInterval > 0, \\\"L2OutputOracle: submission interval must be greater than 0\\\");\\n\\n        SUBMISSION_INTERVAL = _submissionInterval;\\n        L2_BLOCK_TIME = _l2BlockTime;\\n        FINALIZATION_PERIOD_SECONDS = _finalizationPeriodSeconds;\\n\\n        initialize({ _startingBlockNumber: 0, _startingTimestamp: 0, _proposer: address(0), _challenger: address(0) });\\n    }\\n\\n    /// @notice Initializer.\\n    /// @param _startingBlockNumber Block number for the first recoded L2 block.\\n    /// @param _startingTimestamp   Timestamp for the first recoded L2 block.\\n    /// @param _proposer            The address of the proposer.\\n    /// @param _challenger          The address of the challenger.\\n    function initialize(\\n        uint256 _startingBlockNumber,\\n        uint256 _startingTimestamp,\\n        address _proposer,\\n        address _challenger\\n    )\\n        // internal  /// @notice visibility is changed from public to internal by oasys custom\\n        public\\n        reinitializer(2)\\n    {\\n        require(\\n            _startingTimestamp <= block.timestamp,\\n            \\\"L2OutputOracle: starting L2 timestamp must be less than current time\\\"\\n        );\\n\\n        startingTimestamp = _startingTimestamp;\\n        startingBlockNumber = _startingBlockNumber;\\n        proposer = _proposer;\\n        challenger = _challenger;\\n    }\\n\\n    /// @notice Getter for the output proposal submission interval.\\n    function submissionInterval() external view returns (uint256) {\\n        return SUBMISSION_INTERVAL;\\n    }\\n\\n    /// @notice Getter for the L2 block time.\\n    function l2BlockTime() external view returns (uint256) {\\n        return L2_BLOCK_TIME;\\n    }\\n\\n    /// @notice Getter for the finalization period.\\n    function finalizationPeriodSeconds() external view returns (uint256) {\\n        return FINALIZATION_PERIOD_SECONDS;\\n    }\\n\\n    /// @notice Getter for the challenger address. This will be removed\\n    ///         in the future, use `challenger` instead.\\n    /// @custom:legacy\\n    function CHALLENGER() external view returns (address) {\\n        return challenger;\\n    }\\n\\n    /// @notice Getter for the proposer address. This will be removed in the\\n    ///         future, use `proposer` instead.\\n    /// @custom:legacy\\n    function PROPOSER() external view returns (address) {\\n        return proposer;\\n    }\\n\\n    /// @notice Deletes all output proposals after and including the proposal that corresponds to\\n    ///         the given output index. Only the challenger address can delete outputs.\\n    /// @param _l2OutputIndex Index of the first L2 output to be deleted.\\n    ///                       All outputs after this output will also be deleted.\\n    // solhint-disable-next-line ordering\\n    function deleteL2Outputs(uint256 _l2OutputIndex) external {\\n        require(msg.sender == challenger, \\\"L2OutputOracle: only the challenger address can delete outputs\\\");\\n\\n        // Make sure we're not *increasing* the length of the array.\\n        require(\\n            _l2OutputIndex < l2Outputs.length, \\\"L2OutputOracle: cannot delete outputs after the latest output index\\\"\\n        );\\n\\n        // Do not allow deleting any outputs that have already been finalized.\\n        require(\\n            block.timestamp - l2Outputs[_l2OutputIndex].timestamp < FINALIZATION_PERIOD_SECONDS,\\n            \\\"L2OutputOracle: cannot delete outputs that have already been finalized\\\"\\n        );\\n\\n        uint256 prevNextL2OutputIndex = nextOutputIndex();\\n\\n        // Use assembly to delete the array elements because Solidity doesn't allow it.\\n        assembly {\\n            sstore(l2Outputs.slot, _l2OutputIndex)\\n        }\\n\\n        emit OutputsDeleted(prevNextL2OutputIndex, _l2OutputIndex);\\n    }\\n\\n    /// @notice Accepts an outputRoot and the timestamp of the corresponding L2 block.\\n    ///         The timestamp must be equal to the current value returned by `nextTimestamp()` in\\n    ///         order to be accepted. This function may only be called by the Proposer.\\n    /// @param _outputRoot    The L2 output of the checkpoint block.\\n    /// @param _l2BlockNumber The L2 block number that resulted in _outputRoot.\\n    /// @param _l1BlockHash   A block hash which must be included in the current chain.\\n    /// @param _l1BlockNumber The block number with the specified block hash.\\n    function proposeL2Output(\\n        bytes32 _outputRoot,\\n        uint256 _l2BlockNumber,\\n        bytes32 _l1BlockHash,\\n        uint256 _l1BlockNumber\\n    )\\n        public virtual /// @notice visibility is chenged from external to override by oasys custom\\n        payable\\n    {\\n        require(msg.sender == proposer, \\\"L2OutputOracle: only the proposer address can propose new outputs\\\");\\n\\n        require(\\n            _l2BlockNumber == nextBlockNumber(),\\n            \\\"L2OutputOracle: block number must be equal to next expected block number\\\"\\n        );\\n\\n        require(\\n            computeL2Timestamp(_l2BlockNumber) < block.timestamp,\\n            \\\"L2OutputOracle: cannot propose L2 output in the future\\\"\\n        );\\n\\n        require(_outputRoot != bytes32(0), \\\"L2OutputOracle: L2 output proposal cannot be the zero hash\\\");\\n\\n        if (_l1BlockHash != bytes32(0)) {\\n            // This check allows the proposer to propose an output based on a given L1 block,\\n            // without fear that it will be reorged out.\\n            // It will also revert if the blockheight provided is more than 256 blocks behind the\\n            // chain tip (as the hash will return as zero). This does open the door to a griefing\\n            // attack in which the proposer's submission is censored until the block is no longer\\n            // retrievable, if the proposer is experiencing this attack it can simply leave out the\\n            // blockhash value, and delay submission until it is confident that the L1 block is\\n            // finalized.\\n            require(\\n                blockhash(_l1BlockNumber) == _l1BlockHash,\\n                \\\"L2OutputOracle: block hash does not match the hash at the expected height\\\"\\n            );\\n        }\\n\\n        emit OutputProposed(_outputRoot, nextOutputIndex(), _l2BlockNumber, block.timestamp);\\n\\n        l2Outputs.push(\\n            Types.OutputProposal({\\n                outputRoot: _outputRoot,\\n                timestamp: uint128(block.timestamp),\\n                l2BlockNumber: uint128(_l2BlockNumber)\\n            })\\n        );\\n    }\\n\\n    /// @notice Returns an output by index. Needed to return a struct instead of a tuple.\\n    /// @param _l2OutputIndex Index of the output to return.\\n    /// @return The output at the given index.\\n    function getL2Output(uint256 _l2OutputIndex) external view returns (Types.OutputProposal memory) {\\n        return l2Outputs[_l2OutputIndex];\\n    }\\n\\n    /// @notice Returns the index of the L2 output that checkpoints a given L2 block number.\\n    ///         Uses a binary search to find the first output greater than or equal to the given\\n    ///         block.\\n    /// @param _l2BlockNumber L2 block number to find a checkpoint for.\\n    /// @return Index of the first checkpoint that commits to the given L2 block number.\\n    function getL2OutputIndexAfter(uint256 _l2BlockNumber) public view returns (uint256) {\\n        // Make sure an output for this block number has actually been proposed.\\n        require(\\n            _l2BlockNumber <= latestBlockNumber(),\\n            \\\"L2OutputOracle: cannot get output for a block that has not been proposed\\\"\\n        );\\n\\n        // Make sure there's at least one output proposed.\\n        require(l2Outputs.length > 0, \\\"L2OutputOracle: cannot get output as no outputs have been proposed yet\\\");\\n\\n        // Find the output via binary search, guaranteed to exist.\\n        uint256 lo = 0;\\n        uint256 hi = l2Outputs.length;\\n        while (lo < hi) {\\n            uint256 mid = (lo + hi) / 2;\\n            if (l2Outputs[mid].l2BlockNumber < _l2BlockNumber) {\\n                lo = mid + 1;\\n            } else {\\n                hi = mid;\\n            }\\n        }\\n\\n        return lo;\\n    }\\n\\n    /// @notice Returns the L2 output proposal that checkpoints a given L2 block number.\\n    ///         Uses a binary search to find the first output greater than or equal to the given\\n    ///         block.\\n    /// @param _l2BlockNumber L2 block number to find a checkpoint for.\\n    /// @return First checkpoint that commits to the given L2 block number.\\n    function getL2OutputAfter(uint256 _l2BlockNumber) external view returns (Types.OutputProposal memory) {\\n        return l2Outputs[getL2OutputIndexAfter(_l2BlockNumber)];\\n    }\\n\\n    /// @notice Returns the number of outputs that have been proposed.\\n    ///         Will revert if no outputs have been proposed yet.\\n    /// @return The number of outputs that have been proposed.\\n    function latestOutputIndex() external view returns (uint256) {\\n        return l2Outputs.length - 1;\\n    }\\n\\n    /// @notice Returns the index of the next output to be proposed.\\n    /// @return The index of the next output to be proposed.\\n    function nextOutputIndex() public view returns (uint256) {\\n        return l2Outputs.length;\\n    }\\n\\n    /// @notice Returns the block number of the latest submitted L2 output proposal.\\n    ///         If no proposals been submitted yet then this function will return the starting\\n    ///         block number.\\n    /// @return Latest submitted L2 block number.\\n    function latestBlockNumber() public view returns (uint256) {\\n        return l2Outputs.length == 0 ? startingBlockNumber : l2Outputs[l2Outputs.length - 1].l2BlockNumber;\\n    }\\n\\n    /// @notice Computes the block number of the next L2 block that needs to be checkpointed.\\n    /// @return Next L2 block number.\\n    function nextBlockNumber() public view returns (uint256) {\\n        return latestBlockNumber() + SUBMISSION_INTERVAL;\\n    }\\n\\n    /// @notice Returns the L2 timestamp corresponding to a given L2 block number.\\n    /// @param _l2BlockNumber The L2 block number of the target block.\\n    /// @return L2 timestamp of the given block.\\n    function computeL2Timestamp(uint256 _l2BlockNumber) public view returns (uint256) {\\n        return startingTimestamp + ((_l2BlockNumber - startingBlockNumber) * L2_BLOCK_TIME);\\n    }\\n}\\n\",\"keccak256\":\"0x92485a667bb4a41017f37dc5fcb67e0e52310a94d97b558e900fb9221c379e66\",\"license\":\"MIT\"},\"contracts/L1/ResourceMetering.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Burn } from \\\"../libraries/Burn.sol\\\";\\nimport { Arithmetic } from \\\"../libraries/Arithmetic.sol\\\";\\n\\n/// @custom:upgradeable\\n/// @title ResourceMetering\\n/// @notice ResourceMetering implements an EIP-1559 style resource metering system where pricing\\n///         updates automatically based on current demand.\\nabstract contract ResourceMetering is Initializable {\\n    /// @notice Represents the various parameters that control the way in which resources are\\n    ///         metered. Corresponds to the EIP-1559 resource metering system.\\n    /// @custom:field prevBaseFee   Base fee from the previous block(s).\\n    /// @custom:field prevBoughtGas Amount of gas bought so far in the current block.\\n    /// @custom:field prevBlockNum  Last block number that the base fee was updated.\\n    struct ResourceParams {\\n        uint128 prevBaseFee;\\n        uint64 prevBoughtGas;\\n        uint64 prevBlockNum;\\n    }\\n\\n    /// @notice Represents the configuration for the EIP-1559 based curve for the deposit gas\\n    ///         market. These values should be set with care as it is possible to set them in\\n    ///         a way that breaks the deposit gas market. The target resource limit is defined as\\n    ///         maxResourceLimit / elasticityMultiplier. This struct was designed to fit within a\\n    ///         single word. There is additional space for additions in the future.\\n    /// @custom:field maxResourceLimit             Represents the maximum amount of deposit gas that\\n    ///                                            can be purchased per block.\\n    /// @custom:field elasticityMultiplier         Determines the target resource limit along with\\n    ///                                            the resource limit.\\n    /// @custom:field baseFeeMaxChangeDenominator  Determines max change on fee per block.\\n    /// @custom:field minimumBaseFee               The min deposit base fee, it is clamped to this\\n    ///                                            value.\\n    /// @custom:field systemTxMaxGas               The amount of gas supplied to the system\\n    ///                                            transaction. This should be set to the same\\n    ///                                            number that the op-node sets as the gas limit\\n    ///                                            for the system transaction.\\n    /// @custom:field maximumBaseFee               The max deposit base fee, it is clamped to this\\n    ///                                            value.\\n    struct ResourceConfig {\\n        uint32 maxResourceLimit;\\n        uint8 elasticityMultiplier;\\n        uint8 baseFeeMaxChangeDenominator;\\n        uint32 minimumBaseFee;\\n        uint32 systemTxMaxGas;\\n        uint128 maximumBaseFee;\\n    }\\n\\n    /// @notice EIP-1559 style gas parameters.\\n    ResourceParams public params;\\n\\n    /// @notice Reserve extra slots (to a total of 50) in the storage layout for future upgrades.\\n    uint256[48] private __gap;\\n\\n    /// @notice Meters access to a function based an amount of a requested resource.\\n    /// @param _amount Amount of the resource requested.\\n    modifier metered(uint64 _amount) {\\n        // Record initial gas amount so we can refund for it later.\\n        uint256 initialGas = gasleft();\\n\\n        // Run the underlying function.\\n        _;\\n\\n        // Run the metering function.\\n        _metered(_amount, initialGas);\\n    }\\n\\n    /// @notice An internal function that holds all of the logic for metering a resource.\\n    /// @param _amount     Amount of the resource requested.\\n    /// @param _initialGas The amount of gas before any modifier execution.\\n    function _metered(uint64 _amount, uint256 _initialGas) internal {\\n        // Update block number and base fee if necessary.\\n        uint256 blockDiff = block.number - params.prevBlockNum;\\n\\n        ResourceConfig memory config = _resourceConfig();\\n        int256 targetResourceLimit =\\n            int256(uint256(config.maxResourceLimit)) / int256(uint256(config.elasticityMultiplier));\\n\\n        if (blockDiff > 0) {\\n            // Handle updating EIP-1559 style gas parameters. We use EIP-1559 to restrict the rate\\n            // at which deposits can be created and therefore limit the potential for deposits to\\n            // spam the L2 system. Fee scheme is very similar to EIP-1559 with minor changes.\\n            int256 gasUsedDelta = int256(uint256(params.prevBoughtGas)) - targetResourceLimit;\\n            int256 baseFeeDelta = (int256(uint256(params.prevBaseFee)) * gasUsedDelta)\\n                / (targetResourceLimit * int256(uint256(config.baseFeeMaxChangeDenominator)));\\n\\n            // Update base fee by adding the base fee delta and clamp the resulting value between\\n            // min and max.\\n            int256 newBaseFee = Arithmetic.clamp({\\n                _value: int256(uint256(params.prevBaseFee)) + baseFeeDelta,\\n                _min: int256(uint256(config.minimumBaseFee)),\\n                _max: int256(uint256(config.maximumBaseFee))\\n            });\\n\\n            // If we skipped more than one block, we also need to account for every empty block.\\n            // Empty block means there was no demand for deposits in that block, so we should\\n            // reflect this lack of demand in the fee.\\n            if (blockDiff > 1) {\\n                // Update the base fee by repeatedly applying the exponent 1-(1/change_denominator)\\n                // blockDiff - 1 times. Simulates multiple empty blocks. Clamp the resulting value\\n                // between min and max.\\n                newBaseFee = Arithmetic.clamp({\\n                    _value: Arithmetic.cdexp({\\n                        _coefficient: newBaseFee,\\n                        _denominator: int256(uint256(config.baseFeeMaxChangeDenominator)),\\n                        _exponent: int256(blockDiff - 1)\\n                    }),\\n                    _min: int256(uint256(config.minimumBaseFee)),\\n                    _max: int256(uint256(config.maximumBaseFee))\\n                });\\n            }\\n\\n            // Update new base fee, reset bought gas, and update block number.\\n            params.prevBaseFee = uint128(uint256(newBaseFee));\\n            params.prevBoughtGas = 0;\\n            params.prevBlockNum = uint64(block.number);\\n        }\\n\\n        // Make sure we can actually buy the resource amount requested by the user.\\n        params.prevBoughtGas += _amount;\\n        require(\\n            int256(uint256(params.prevBoughtGas)) <= int256(uint256(config.maxResourceLimit)),\\n            \\\"ResourceMetering: cannot buy more gas than available gas limit\\\"\\n        );\\n\\n        // Determine the amount of ETH to be paid.\\n        uint256 resourceCost = uint256(_amount) * uint256(params.prevBaseFee);\\n\\n        // We currently charge for this ETH amount as an L1 gas burn, so we convert the ETH amount\\n        // into gas by dividing by the L1 base fee. We assume a minimum base fee of 1 gwei to avoid\\n        // division by zero for L1s that don't support 1559 or to avoid excessive gas burns during\\n        // periods of extremely low L1 demand. One-day average gas fee hasn't dipped below 1 gwei\\n        // during any 1 day period in the last 5 years, so should be fine.\\n        uint256 gasCost = resourceCost / Math.max(block.basefee, 1 gwei);\\n\\n        // Give the user a refund based on the amount of gas they used to do all of the work up to\\n        // this point. Since we're at the end of the modifier, this should be pretty accurate. Acts\\n        // effectively like a dynamic stipend (with a minimum value).\\n        uint256 usedGas = _initialGas - gasleft();\\n        if (gasCost > usedGas) {\\n            Burn.gas(gasCost - usedGas);\\n        }\\n    }\\n\\n    /// @notice Virtual function that returns the resource config.\\n    ///         Contracts that inherit this contract must implement this function.\\n    /// @return ResourceConfig\\n    function _resourceConfig() internal virtual returns (ResourceConfig memory);\\n\\n    /// @notice Sets initial resource parameter values.\\n    ///         This function must either be called by the initializer function of an upgradeable\\n    ///         child contract.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ResourceMetering_init() internal onlyInitializing {\\n        params = ResourceParams({ prevBaseFee: 1 gwei, prevBoughtGas: 0, prevBlockNum: uint64(block.number) });\\n    }\\n}\\n\",\"keccak256\":\"0xcbdb44713cb15af4c542ef51f2be9e32da0bb4ffc72a03953b38870955023fc3\",\"license\":\"MIT\"},\"contracts/legacy/AddressManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @custom:legacy\\n/// @title AddressManager\\n/// @notice AddressManager is a legacy contract that was used in the old version of the Optimism\\n///         system to manage a registry of string names to addresses. We now use a more standard\\n///         proxy system instead, but this contract is still necessary for backwards compatibility\\n///         with several older contracts.\\ncontract AddressManager is Ownable {\\n    /// @notice Mapping of the hashes of string names to addresses.\\n    mapping(bytes32 => address) private addresses;\\n\\n    /// @notice Emitted when an address is modified in the registry.\\n    /// @param name       String name being set in the registry.\\n    /// @param newAddress Address set for the given name.\\n    /// @param oldAddress Address that was previously set for the given name.\\n    event AddressSet(string indexed name, address newAddress, address oldAddress);\\n\\n    /// @notice Changes the address associated with a particular name.\\n    /// @param _name    String name to associate an address with.\\n    /// @param _address Address to associate with the name.\\n    function setAddress(string memory _name, address _address) external onlyOwner {\\n        bytes32 nameHash = _getNameHash(_name);\\n        address oldAddress = addresses[nameHash];\\n        addresses[nameHash] = _address;\\n\\n        emit AddressSet(_name, _address, oldAddress);\\n    }\\n\\n    /// @notice Retrieves the address associated with a given name.\\n    /// @param _name Name to retrieve an address for.\\n    /// @return Address associated with the given name.\\n    function getAddress(string memory _name) external view returns (address) {\\n        return addresses[_getNameHash(_name)];\\n    }\\n\\n    /// @notice Computes the hash of a name.\\n    /// @param _name Name to compute a hash for.\\n    /// @return Hash of the given name.\\n    function _getNameHash(string memory _name) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_name));\\n    }\\n}\\n\",\"keccak256\":\"0x1fcb990df6473f7fa360d5924d62d39ce2ca97d45668e3901e5405cfbe598b19\",\"license\":\"MIT\"},\"contracts/legacy/L1ChugSplashProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Constants } from \\\"../libraries/Constants.sol\\\";\\n\\n/// @title IL1ChugSplashDeployer\\ninterface IL1ChugSplashDeployer {\\n    function isUpgrading() external view returns (bool);\\n}\\n\\n/// @custom:legacy\\n/// @title L1ChugSplashProxy\\n/// @notice Basic ChugSplash proxy contract for L1. Very close to being a normal proxy but has added\\n///         functions `setCode` and `setStorage` for changing the code or storage of the contract.\\n///         Note for future developers: do NOT make anything in this contract 'public' unless you\\n///         know what you're doing. Anything public can potentially have a function signature that\\n///         conflicts with a signature attached to the implementation contract. Public functions\\n///         SHOULD always have the `proxyCallIfNotOwner` modifier unless there's some *really* good\\n///         reason not to have that modifier. And there almost certainly is not a good reason to not\\n///         have that modifier. Beware!\\ncontract L1ChugSplashProxy {\\n    /// @notice \\\"Magic\\\" prefix. When prepended to some arbitrary bytecode and used to create a\\n    ///         contract, the appended bytecode will be deployed as given.\\n    bytes13 internal constant DEPLOY_CODE_PREFIX = 0x600D380380600D6000396000f3;\\n\\n    /// @notice Blocks a function from being called when the parent signals that the system should\\n    ///         be paused via an isUpgrading function.\\n    modifier onlyWhenNotPaused() {\\n        address owner = _getOwner();\\n\\n        // We do a low-level call because there's no guarantee that the owner actually *is* an\\n        // L1ChugSplashDeployer contract and Solidity will throw errors if we do a normal call and\\n        // it turns out that it isn't the right type of contract.\\n        (bool success, bytes memory returndata) =\\n            owner.staticcall(abi.encodeWithSelector(IL1ChugSplashDeployer.isUpgrading.selector));\\n\\n        // If the call was unsuccessful then we assume that there's no \\\"isUpgrading\\\" method and we\\n        // can just continue as normal. We also expect that the return value is exactly 32 bytes\\n        // long. If this isn't the case then we can safely ignore the result.\\n        if (success && returndata.length == 32) {\\n            // Although the expected value is a *boolean*, it's safer to decode as a uint256 in the\\n            // case that the isUpgrading function returned something other than 0 or 1. But we only\\n            // really care about the case where this value is 0 (= false).\\n            uint256 ret = abi.decode(returndata, (uint256));\\n            require(ret == 0, \\\"L1ChugSplashProxy: system is currently being upgraded\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Makes a proxy call instead of triggering the given function when the caller is\\n    ///         either the owner or the zero address. Caller can only ever be the zero address if\\n    ///         this function is being called off-chain via eth_call, which is totally fine and can\\n    ///         be convenient for client-side tooling. Avoids situations where the proxy and\\n    ///         implementation share a sighash and the proxy function ends up being called instead\\n    ///         of the implementation one.\\n    ///         Note: msg.sender == address(0) can ONLY be triggered off-chain via eth_call. If\\n    ///         there's a way for someone to send a transaction with msg.sender == address(0) in any\\n    ///         real context then we have much bigger problems. Primary reason to include this\\n    ///         additional allowed sender is because the owner address can be changed dynamically\\n    ///         and we do not want clients to have to keep track of the current owner in order to\\n    ///         make an eth_call that doesn't trigger the proxied contract.\\n    // slither-disable-next-line incorrect-modifier\\n    modifier proxyCallIfNotOwner() {\\n        if (msg.sender == _getOwner() || msg.sender == address(0)) {\\n            _;\\n        } else {\\n            // This WILL halt the call frame on completion.\\n            _doProxyCall();\\n        }\\n    }\\n\\n    /// @param _owner Address of the initial contract owner.\\n    constructor(address _owner) {\\n        _setOwner(_owner);\\n    }\\n\\n    // slither-disable-next-line locked-ether\\n    receive() external payable {\\n        // Proxy call by default.\\n        _doProxyCall();\\n    }\\n\\n    // slither-disable-next-line locked-ether\\n    fallback() external payable {\\n        // Proxy call by default.\\n        _doProxyCall();\\n    }\\n\\n    /// @notice Sets the code that should be running behind this proxy.\\n    ///         Note: This scheme is a bit different from the standard proxy scheme where one would\\n    ///         typically deploy the code separately and then set the implementation address. We're\\n    ///         doing it this way because it gives us a lot more freedom on the client side. Can\\n    ///         only be triggered by the contract owner.\\n    /// @param _code New contract code to run inside this contract.\\n    function setCode(bytes memory _code) external proxyCallIfNotOwner {\\n        // Get the code hash of the current implementation.\\n        address implementation = _getImplementation();\\n\\n        // If the code hash matches the new implementation then we return early.\\n        if (keccak256(_code) == _getAccountCodeHash(implementation)) {\\n            return;\\n        }\\n\\n        // Create the deploycode by appending the magic prefix.\\n        bytes memory deploycode = abi.encodePacked(DEPLOY_CODE_PREFIX, _code);\\n\\n        // Deploy the code and set the new implementation address.\\n        address newImplementation;\\n        assembly {\\n            newImplementation := create(0x0, add(deploycode, 0x20), mload(deploycode))\\n        }\\n\\n        // Check that the code was actually deployed correctly. I'm not sure if you can ever\\n        // actually fail this check. Should only happen if the contract creation from above runs\\n        // out of gas but this parent execution thread does NOT run out of gas. Seems like we\\n        // should be doing this check anyway though.\\n        require(\\n            _getAccountCodeHash(newImplementation) == keccak256(_code),\\n            \\\"L1ChugSplashProxy: code was not correctly deployed\\\"\\n        );\\n\\n        _setImplementation(newImplementation);\\n    }\\n\\n    /// @notice Modifies some storage slot within the proxy contract. Gives us a lot of power to\\n    ///         perform upgrades in a more transparent way. Only callable by the owner.\\n    /// @param _key   Storage key to modify.\\n    /// @param _value New value for the storage key.\\n    function setStorage(bytes32 _key, bytes32 _value) external proxyCallIfNotOwner {\\n        assembly {\\n            sstore(_key, _value)\\n        }\\n    }\\n\\n    /// @notice Changes the owner of the proxy contract. Only callable by the owner.\\n    /// @param _owner New owner of the proxy contract.\\n    function setOwner(address _owner) external proxyCallIfNotOwner {\\n        _setOwner(_owner);\\n    }\\n\\n    /// @notice Queries the owner of the proxy contract. Can only be called by the owner OR by\\n    ///         making an eth_call and setting the \\\"from\\\" address to address(0).\\n    /// @return Owner address.\\n    function getOwner() external proxyCallIfNotOwner returns (address) {\\n        return _getOwner();\\n    }\\n\\n    /// @notice Queries the implementation address. Can only be called by the owner OR by making an\\n    ///         eth_call and setting the \\\"from\\\" address to address(0).\\n    /// @return Implementation address.\\n    function getImplementation() external proxyCallIfNotOwner returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /// @notice Sets the implementation address.\\n    /// @param _implementation New implementation address.\\n    function _setImplementation(address _implementation) internal {\\n        bytes32 proxyImplementation = Constants.PROXY_IMPLEMENTATION_ADDRESS;\\n        assembly {\\n            sstore(proxyImplementation, _implementation)\\n        }\\n    }\\n\\n    /// @notice Changes the owner of the proxy contract.\\n    /// @param _owner New owner of the proxy contract.\\n    function _setOwner(address _owner) internal {\\n        bytes32 proxyOwner = Constants.PROXY_OWNER_ADDRESS;\\n        assembly {\\n            sstore(proxyOwner, _owner)\\n        }\\n    }\\n\\n    /// @notice Performs the proxy call via a delegatecall.\\n    function _doProxyCall() internal onlyWhenNotPaused {\\n        address implementation = _getImplementation();\\n\\n        require(implementation != address(0), \\\"L1ChugSplashProxy: implementation is not set yet\\\");\\n\\n        assembly {\\n            // Copy calldata into memory at 0x0....calldatasize.\\n            calldatacopy(0x0, 0x0, calldatasize())\\n\\n            // Perform the delegatecall, make sure to pass all available gas.\\n            let success := delegatecall(gas(), implementation, 0x0, calldatasize(), 0x0, 0x0)\\n\\n            // Copy returndata into memory at 0x0....returndatasize. Note that this *will*\\n            // overwrite the calldata that we just copied into memory but that doesn't really\\n            // matter because we'll be returning in a second anyway.\\n            returndatacopy(0x0, 0x0, returndatasize())\\n\\n            // Success == 0 means a revert. We'll revert too and pass the data up.\\n            if iszero(success) { revert(0x0, returndatasize()) }\\n\\n            // Otherwise we'll just return and pass the data up.\\n            return(0x0, returndatasize())\\n        }\\n    }\\n\\n    /// @notice Queries the implementation address.\\n    /// @return Implementation address.\\n    function _getImplementation() internal view returns (address) {\\n        address implementation;\\n        bytes32 proxyImplementation = Constants.PROXY_IMPLEMENTATION_ADDRESS;\\n        assembly {\\n            implementation := sload(proxyImplementation)\\n        }\\n        return implementation;\\n    }\\n\\n    /// @notice Queries the owner of the proxy contract.\\n    /// @return Owner address.\\n    function _getOwner() internal view returns (address) {\\n        address owner;\\n        bytes32 proxyOwner = Constants.PROXY_OWNER_ADDRESS;\\n        assembly {\\n            owner := sload(proxyOwner)\\n        }\\n        return owner;\\n    }\\n\\n    /// @notice Gets the code hash for a given account.\\n    /// @param _account Address of the account to get a code hash for.\\n    /// @return Code hash for the account.\\n    function _getAccountCodeHash(address _account) internal view returns (bytes32) {\\n        bytes32 codeHash;\\n        assembly {\\n            codeHash := extcodehash(_account)\\n        }\\n        return codeHash;\\n    }\\n}\\n\",\"keccak256\":\"0xf8fd3adf2d45c5fd6b28ce16ecaf5d119b1567fefe4a78dcd3f551e412c4c4d6\",\"license\":\"MIT\"},\"contracts/libraries/Arithmetic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { SignedMath } from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport { FixedPointMathLib } from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\n\\n/// @title Arithmetic\\n/// @notice Even more math than before.\\nlibrary Arithmetic {\\n    /// @notice Clamps a value between a minimum and maximum.\\n    /// @param _value The value to clamp.\\n    /// @param _min   The minimum value.\\n    /// @param _max   The maximum value.\\n    /// @return The clamped value.\\n    function clamp(int256 _value, int256 _min, int256 _max) internal pure returns (int256) {\\n        return SignedMath.min(SignedMath.max(_value, _min), _max);\\n    }\\n\\n    /// @notice (c)oefficient (d)enominator (exp)onentiation function.\\n    ///         Returns the result of: c * (1 - 1/d)^exp.\\n    /// @param _coefficient Coefficient of the function.\\n    /// @param _denominator Fractional denominator.\\n    /// @param _exponent    Power function exponent.\\n    /// @return Result of c * (1 - 1/d)^exp.\\n    function cdexp(int256 _coefficient, int256 _denominator, int256 _exponent) internal pure returns (int256) {\\n        return (_coefficient * (FixedPointMathLib.powWad(1e18 - (1e18 / _denominator), _exponent * 1e18))) / 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0x06a5a8b00527843f0cfc1bb3c0661316966a6cc432f88be31f23cde78cd07560\",\"license\":\"MIT\"},\"contracts/libraries/Burn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n/// @title Burn\\n/// @notice Utilities for burning stuff.\\nlibrary Burn {\\n    /// @notice Burns a given amount of ETH.\\n    /// @param _amount Amount of ETH to burn.\\n    function eth(uint256 _amount) internal {\\n        new Burner{ value: _amount }();\\n    }\\n\\n    /// @notice Burns a given amount of gas.\\n    /// @param _amount Amount of gas to burn.\\n    function gas(uint256 _amount) internal view {\\n        uint256 i = 0;\\n        uint256 initialGas = gasleft();\\n        while (initialGas - gasleft() < _amount) {\\n            ++i;\\n        }\\n    }\\n}\\n\\n/// @title Burner\\n/// @notice Burner self-destructs on creation and sends all ETH to itself, removing all ETH given to\\n///         the contract from the circulating supply. Self-destructing is the only way to remove ETH\\n///         from the circulating supply.\\ncontract Burner {\\n    constructor() payable {\\n        selfdestruct(payable(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x90a795bcea3ef06d6d5011256c4bd63d1a4271f519246dbf1ee3e8f1c0e21010\",\"license\":\"MIT\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ResourceMetering } from \\\"../L1/ResourceMetering.sol\\\";\\n\\n/// @title Constants\\n/// @notice Constants is a library for storing constants. Simple! Don't put everything in here, just\\n///         the stuff used in multiple contracts. Constants that only apply to a single contract\\n///         should be defined in that contract instead.\\nlibrary Constants {\\n    /// @notice Special address to be used as the tx origin for gas estimation calls in the\\n    ///         OptimismPortal and CrossDomainMessenger calls. You only need to use this address if\\n    ///         the minimum gas limit specified by the user is not actually enough to execute the\\n    ///         given message and you're attempting to estimate the actual necessary gas limit. We\\n    ///         use address(1) because it's the ecrecover precompile and therefore guaranteed to\\n    ///         never have any code on any EVM chain.\\n    address internal constant ESTIMATION_ADDRESS = address(1);\\n\\n    /// @notice Value used for the L2 sender storage slot in both the OptimismPortal and the\\n    ///         CrossDomainMessenger contracts before an actual sender is set. This value is\\n    ///         non-zero to reduce the gas cost of message passing transactions.\\n    address internal constant DEFAULT_L2_SENDER = 0x000000000000000000000000000000000000dEaD;\\n\\n    /// @notice The storage slot that holds the address of a proxy implementation.\\n    /// @dev `bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)`\\n    bytes32 internal constant PROXY_IMPLEMENTATION_ADDRESS =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /// @notice The storage slot that holds the address of the owner.\\n    /// @dev `bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1)`\\n    bytes32 internal constant PROXY_OWNER_ADDRESS = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /// @notice Returns the default values for the ResourceConfig. These are the recommended values\\n    ///         for a production network.\\n    function DEFAULT_RESOURCE_CONFIG() internal pure returns (ResourceMetering.ResourceConfig memory) {\\n        ResourceMetering.ResourceConfig memory config = ResourceMetering.ResourceConfig({\\n            maxResourceLimit: 20_000_000,\\n            elasticityMultiplier: 10,\\n            baseFeeMaxChangeDenominator: 8,\\n            minimumBaseFee: 1 gwei,\\n            systemTxMaxGas: 1_000_000,\\n            maximumBaseFee: type(uint128).max\\n        });\\n        return config;\\n    }\\n}\\n\",\"keccak256\":\"0x8fcbc468fa4924f81538d4a6674031e12b62b61a88e869fdf099158a0d0c6a19\",\"license\":\"MIT\"},\"contracts/libraries/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Types\\n/// @notice Contains various types used throughout the Optimism contract system.\\nlibrary Types {\\n    /// @notice OutputProposal represents a commitment to the L2 state. The timestamp is the L1\\n    ///         timestamp that the output root is posted. This timestamp is used to verify that the\\n    ///         finalization period has passed since the output root was submitted.\\n    /// @custom:field outputRoot    Hash of the L2 output.\\n    /// @custom:field timestamp     Timestamp of the L1 block that the output root was submitted in.\\n    /// @custom:field l2BlockNumber L2 block number that the output corresponds to.\\n    struct OutputProposal {\\n        bytes32 outputRoot;\\n        uint128 timestamp;\\n        uint128 l2BlockNumber;\\n    }\\n\\n    /// @notice Struct representing the elements that are hashed together to generate an output root\\n    ///         which itself represents a snapshot of the L2 state.\\n    /// @custom:field version                  Version of the output root.\\n    /// @custom:field stateRoot                Root of the state trie at the block of this output.\\n    /// @custom:field messagePasserStorageRoot Root of the message passer storage trie.\\n    /// @custom:field latestBlockhash          Hash of the block this output was generated from.\\n    struct OutputRootProof {\\n        bytes32 version;\\n        bytes32 stateRoot;\\n        bytes32 messagePasserStorageRoot;\\n        bytes32 latestBlockhash;\\n    }\\n\\n    /// @notice Struct representing a deposit transaction (L1 => L2 transaction) created by an end\\n    ///         user (as opposed to a system deposit transaction generated by the system).\\n    /// @custom:field from        Address of the sender of the transaction.\\n    /// @custom:field to          Address of the recipient of the transaction.\\n    /// @custom:field isCreation  True if the transaction is a contract creation.\\n    /// @custom:field value       Value to send to the recipient.\\n    /// @custom:field mint        Amount of ETH to mint.\\n    /// @custom:field gasLimit    Gas limit of the transaction.\\n    /// @custom:field data        Data of the transaction.\\n    /// @custom:field l1BlockHash Hash of the block the transaction was submitted in.\\n    /// @custom:field logIndex    Index of the log in the block the transaction was submitted in.\\n    struct UserDepositTransaction {\\n        address from;\\n        address to;\\n        bool isCreation;\\n        uint256 value;\\n        uint256 mint;\\n        uint64 gasLimit;\\n        bytes data;\\n        bytes32 l1BlockHash;\\n        uint256 logIndex;\\n    }\\n\\n    /// @notice Struct representing a withdrawal transaction.\\n    /// @custom:field nonce    Nonce of the withdrawal transaction\\n    /// @custom:field sender   Address of the sender of the transaction.\\n    /// @custom:field target   Address of the recipient of the transaction.\\n    /// @custom:field value    Value to send to the recipient.\\n    /// @custom:field gasLimit Gas limit of the transaction.\\n    /// @custom:field data     Data of the transaction.\\n    struct WithdrawalTransaction {\\n        uint256 nonce;\\n        address sender;\\n        address target;\\n        uint256 value;\\n        uint256 gasLimit;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x75900d651301940d24c00d14f0b3b6cbd6dcf379173ceaa31d9bf5be934a9aa4\",\"license\":\"MIT\"},\"contracts/oasys/L1Build/Build_L2OutputOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Semver } from \\\"../../universal/Semver.sol\\\";\\nimport { ProxyAdmin } from \\\"../../universal/ProxyAdmin.sol\\\";\\nimport { L2OutputOracle } from \\\"../../L1/L2OutputOracle.sol\\\";\\n// import { L2OutputOracle } from \\\"../L1/OasysL2OutputOracle.sol\\\";\\n\\n/// @notice Hold the deployment bytecode\\n///         Separate from build contract to avoid bytecode size limitations\\ncontract Build_L2OutputOracle is Semver {\\n    constructor() Semver(1, 0, 0) {}\\n\\n    /// @notice The create2 salt used for deployment of the contract implementations.\\n    function deployBytecode(\\n        uint256 l2OutputOracleSubmissionInterval,\\n        uint256 l2BlockTime,\\n        uint256 finalizationPeriodSeconds\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(abi.encodePacked(type(L2OutputOracle).creationCode), abi.encode(l2OutputOracleSubmissionInterval, l2BlockTime, finalizationPeriodSeconds));\\n    }\\n}\\n\",\"keccak256\":\"0x83b30721503065b79644d44061a6cedfaffc8ec855b3723f08c30360a5f96324\",\"license\":\"MIT\"},\"contracts/universal/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice ISemver is a simple contract for ensuring that contracts are\\n///         versioned using semantic versioning.\\ninterface ISemver {\\n    /// @notice Getter for the semantic version of the contract. This is not\\n    ///         meant to be used onchain but instead meant to be used by offchain\\n    ///         tooling.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xba34562a8026f59886d2e07d1d58d90b9691d00e0788c6263cef6c22740cab44\",\"license\":\"MIT\"},\"contracts/universal/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Constants } from \\\"../libraries/Constants.sol\\\";\\n\\n/// @title Proxy\\n/// @notice Proxy is a transparent proxy that passes through the call if the caller is the owner or\\n///         if the caller is address(0), meaning that the call originated from an off-chain\\n///         simulation.\\ncontract Proxy {\\n    /// @notice An event that is emitted each time the implementation is changed. This event is part\\n    ///         of the EIP-1967 specification.\\n    /// @param implementation The address of the implementation contract\\n    event Upgraded(address indexed implementation);\\n\\n    /// @notice An event that is emitted each time the owner is upgraded. This event is part of the\\n    ///         EIP-1967 specification.\\n    /// @param previousAdmin The previous owner of the contract\\n    /// @param newAdmin      The new owner of the contract\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /// @notice A modifier that reverts if not called by the owner or by address(0) to allow\\n    ///         eth_call to interact with this proxy without needing to use low-level storage\\n    ///         inspection. We assume that nobody is able to trigger calls from address(0) during\\n    ///         normal EVM execution.\\n    modifier proxyCallIfNotAdmin() {\\n        if (msg.sender == _getAdmin() || msg.sender == address(0)) {\\n            _;\\n        } else {\\n            // This WILL halt the call frame on completion.\\n            _doProxyCall();\\n        }\\n    }\\n\\n    /// @notice Sets the initial admin during contract deployment. Admin address is stored at the\\n    ///         EIP-1967 admin storage slot so that accidental storage collision with the\\n    ///         implementation is not possible.\\n    /// @param _admin Address of the initial contract admin. Admin as the ability to access the\\n    ///               transparent proxy interface.\\n    constructor(address _admin) {\\n        _changeAdmin(_admin);\\n    }\\n\\n    // slither-disable-next-line locked-ether\\n    receive() external payable {\\n        // Proxy call by default.\\n        _doProxyCall();\\n    }\\n\\n    // slither-disable-next-line locked-ether\\n    fallback() external payable {\\n        // Proxy call by default.\\n        _doProxyCall();\\n    }\\n\\n    /// @notice Set the implementation contract address. The code at the given address will execute\\n    ///         when this contract is called.\\n    /// @param _implementation Address of the implementation contract.\\n    function upgradeTo(address _implementation) public virtual proxyCallIfNotAdmin {\\n        _setImplementation(_implementation);\\n    }\\n\\n    /// @notice Set the implementation and call a function in a single transaction. Useful to ensure\\n    ///         atomic execution of initialization-based upgrades.\\n    /// @param _implementation Address of the implementation contract.\\n    /// @param _data           Calldata to delegatecall the new implementation with.\\n    function upgradeToAndCall(\\n        address _implementation,\\n        bytes calldata _data\\n    )\\n        public\\n        payable\\n        virtual\\n        proxyCallIfNotAdmin\\n        returns (bytes memory)\\n    {\\n        _setImplementation(_implementation);\\n        (bool success, bytes memory returndata) = _implementation.delegatecall(_data);\\n        require(success, \\\"Proxy: delegatecall to new implementation contract failed\\\");\\n        return returndata;\\n    }\\n\\n    /// @notice Changes the owner of the proxy contract. Only callable by the owner.\\n    /// @param _admin New owner of the proxy contract.\\n    function changeAdmin(address _admin) public virtual proxyCallIfNotAdmin {\\n        _changeAdmin(_admin);\\n    }\\n\\n    /// @notice Gets the owner of the proxy contract.\\n    /// @return Owner address.\\n    function admin() public virtual proxyCallIfNotAdmin returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    //// @notice Queries the implementation address.\\n    /// @return Implementation address.\\n    function implementation() public virtual proxyCallIfNotAdmin returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /// @notice Sets the implementation address.\\n    /// @param _implementation New implementation address.\\n    function _setImplementation(address _implementation) internal {\\n        bytes32 proxyImplementation = Constants.PROXY_IMPLEMENTATION_ADDRESS;\\n        assembly {\\n            sstore(proxyImplementation, _implementation)\\n        }\\n        emit Upgraded(_implementation);\\n    }\\n\\n    /// @notice Changes the owner of the proxy contract.\\n    /// @param _admin New owner of the proxy contract.\\n    function _changeAdmin(address _admin) internal {\\n        address previous = _getAdmin();\\n        bytes32 proxyOwner = Constants.PROXY_OWNER_ADDRESS;\\n        assembly {\\n            sstore(proxyOwner, _admin)\\n        }\\n        emit AdminChanged(previous, _admin);\\n    }\\n\\n    /// @notice Performs the proxy call via a delegatecall.\\n    function _doProxyCall() internal {\\n        address impl = _getImplementation();\\n        require(impl != address(0), \\\"Proxy: implementation not initialized\\\");\\n\\n        assembly {\\n            // Copy calldata into memory at 0x0....calldatasize.\\n            calldatacopy(0x0, 0x0, calldatasize())\\n\\n            // Perform the delegatecall, make sure to pass all available gas.\\n            let success := delegatecall(gas(), impl, 0x0, calldatasize(), 0x0, 0x0)\\n\\n            // Copy returndata into memory at 0x0....returndatasize. Note that this *will*\\n            // overwrite the calldata that we just copied into memory but that doesn't really\\n            // matter because we'll be returning in a second anyway.\\n            returndatacopy(0x0, 0x0, returndatasize())\\n\\n            // Success == 0 means a revert. We'll revert too and pass the data up.\\n            if iszero(success) { revert(0x0, returndatasize()) }\\n\\n            // Otherwise we'll just return and pass the data up.\\n            return(0x0, returndatasize())\\n        }\\n    }\\n\\n    /// @notice Queries the implementation address.\\n    /// @return Implementation address.\\n    function _getImplementation() internal view returns (address) {\\n        address impl;\\n        bytes32 proxyImplementation = Constants.PROXY_IMPLEMENTATION_ADDRESS;\\n        assembly {\\n            impl := sload(proxyImplementation)\\n        }\\n        return impl;\\n    }\\n\\n    /// @notice Queries the owner of the proxy contract.\\n    /// @return Owner address.\\n    function _getAdmin() internal view returns (address) {\\n        address owner;\\n        bytes32 proxyOwner = Constants.PROXY_OWNER_ADDRESS;\\n        assembly {\\n            owner := sload(proxyOwner)\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0xc56de5e39cd44eaeb93f0f8705dd07f4a89f66d5c186522532cf899a104cdbca\",\"license\":\"MIT\"},\"contracts/universal/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Proxy } from \\\"./Proxy.sol\\\";\\nimport { AddressManager } from \\\"../legacy/AddressManager.sol\\\";\\nimport { L1ChugSplashProxy } from \\\"../legacy/L1ChugSplashProxy.sol\\\";\\nimport { Constants } from \\\"../libraries/Constants.sol\\\";\\n\\n/// @title IStaticERC1967Proxy\\n/// @notice IStaticERC1967Proxy is a static version of the ERC1967 proxy interface.\\ninterface IStaticERC1967Proxy {\\n    function implementation() external view returns (address);\\n\\n    function admin() external view returns (address);\\n}\\n\\n/// @title IStaticL1ChugSplashProxy\\n/// @notice IStaticL1ChugSplashProxy is a static version of the ChugSplash proxy interface.\\ninterface IStaticL1ChugSplashProxy {\\n    function getImplementation() external view returns (address);\\n\\n    function getOwner() external view returns (address);\\n}\\n\\n/// @title ProxyAdmin\\n/// @notice This is an auxiliary contract meant to be assigned as the admin of an ERC1967 Proxy,\\n///         based on the OpenZeppelin implementation. It has backwards compatibility logic to work\\n///         with the various types of proxies that have been deployed by Optimism in the past.\\ncontract ProxyAdmin is Ownable {\\n    /// @notice The proxy types that the ProxyAdmin can manage.\\n    /// @custom:value ERC1967    Represents an ERC1967 compliant transparent proxy interface.\\n    /// @custom:value CHUGSPLASH Represents the Chugsplash proxy interface (legacy).\\n    /// @custom:value RESOLVED   Represents the ResolvedDelegate proxy (legacy).\\n    enum ProxyType {\\n        ERC1967,\\n        CHUGSPLASH,\\n        RESOLVED\\n    }\\n\\n    /// @notice A mapping of proxy types, used for backwards compatibility.\\n    mapping(address => ProxyType) public proxyType;\\n\\n    /// @notice A reverse mapping of addresses to names held in the AddressManager. This must be\\n    ///         manually kept up to date with changes in the AddressManager for this contract\\n    ///         to be able to work as an admin for the ResolvedDelegateProxy type.\\n    mapping(address => string) public implementationName;\\n\\n    /// @notice The address of the address manager, this is required to manage the\\n    ///         ResolvedDelegateProxy type.\\n    AddressManager public addressManager;\\n\\n    /// @notice A legacy upgrading indicator used by the old Chugsplash Proxy.\\n    bool internal upgrading;\\n\\n    /// @param _owner Address of the initial owner of this contract.\\n    constructor(address _owner) Ownable() {\\n        _transferOwnership(_owner);\\n    }\\n\\n    /// @notice Sets the proxy type for a given address. Only required for non-standard (legacy)\\n    ///         proxy types.\\n    /// @param _address Address of the proxy.\\n    /// @param _type    Type of the proxy.\\n    function setProxyType(address _address, ProxyType _type) external onlyOwner {\\n        proxyType[_address] = _type;\\n    }\\n\\n    /// @notice Sets the implementation name for a given address. Only required for\\n    ///         ResolvedDelegateProxy type proxies that have an implementation name.\\n    /// @param _address Address of the ResolvedDelegateProxy.\\n    /// @param _name    Name of the implementation for the proxy.\\n    function setImplementationName(address _address, string memory _name) external onlyOwner {\\n        implementationName[_address] = _name;\\n    }\\n\\n    /// @notice Set the address of the AddressManager. This is required to manage legacy\\n    ///         ResolvedDelegateProxy type proxy contracts.\\n    /// @param _address Address of the AddressManager.\\n    function setAddressManager(AddressManager _address) external onlyOwner {\\n        addressManager = _address;\\n    }\\n\\n    /// @custom:legacy\\n    /// @notice Set an address in the address manager. Since only the owner of the AddressManager\\n    ///         can directly modify addresses and the ProxyAdmin will own the AddressManager, this\\n    ///         gives the owner of the ProxyAdmin the ability to modify addresses directly.\\n    /// @param _name    Name to set within the AddressManager.\\n    /// @param _address Address to attach to the given name.\\n    function setAddress(string memory _name, address _address) external onlyOwner {\\n        addressManager.setAddress(_name, _address);\\n    }\\n\\n    /// @custom:legacy\\n    /// @notice Set the upgrading status for the Chugsplash proxy type.\\n    /// @param _upgrading Whether or not the system is upgrading.\\n    function setUpgrading(bool _upgrading) external onlyOwner {\\n        upgrading = _upgrading;\\n    }\\n\\n    /// @custom:legacy\\n    /// @notice Legacy function used to tell ChugSplashProxy contracts if an upgrade is happening.\\n    /// @return Whether or not there is an upgrade going on. May not actually tell you whether an\\n    ///         upgrade is going on, since we don't currently plan to use this variable for anything\\n    ///         other than a legacy indicator to fix a UX bug in the ChugSplash proxy.\\n    function isUpgrading() external view returns (bool) {\\n        return upgrading;\\n    }\\n\\n    /// @notice Returns the implementation of the given proxy address.\\n    /// @param _proxy Address of the proxy to get the implementation of.\\n    /// @return Address of the implementation of the proxy.\\n    function getProxyImplementation(address _proxy) external view returns (address) {\\n        ProxyType ptype = proxyType[_proxy];\\n        if (ptype == ProxyType.ERC1967) {\\n            return IStaticERC1967Proxy(_proxy).implementation();\\n        } else if (ptype == ProxyType.CHUGSPLASH) {\\n            return IStaticL1ChugSplashProxy(_proxy).getImplementation();\\n        } else if (ptype == ProxyType.RESOLVED) {\\n            return addressManager.getAddress(implementationName[_proxy]);\\n        } else {\\n            revert(\\\"ProxyAdmin: unknown proxy type\\\");\\n        }\\n    }\\n\\n    /// @notice Returns the admin of the given proxy address.\\n    /// @param _proxy Address of the proxy to get the admin of.\\n    /// @return Address of the admin of the proxy.\\n    function getProxyAdmin(address payable _proxy) external view returns (address) {\\n        ProxyType ptype = proxyType[_proxy];\\n        if (ptype == ProxyType.ERC1967) {\\n            return IStaticERC1967Proxy(_proxy).admin();\\n        } else if (ptype == ProxyType.CHUGSPLASH) {\\n            return IStaticL1ChugSplashProxy(_proxy).getOwner();\\n        } else if (ptype == ProxyType.RESOLVED) {\\n            return addressManager.owner();\\n        } else {\\n            revert(\\\"ProxyAdmin: unknown proxy type\\\");\\n        }\\n    }\\n\\n    /// @notice Updates the admin of the given proxy address.\\n    /// @param _proxy    Address of the proxy to update.\\n    /// @param _newAdmin Address of the new proxy admin.\\n    function changeProxyAdmin(address payable _proxy, address _newAdmin) external onlyOwner {\\n        ProxyType ptype = proxyType[_proxy];\\n        if (ptype == ProxyType.ERC1967) {\\n            Proxy(_proxy).changeAdmin(_newAdmin);\\n        } else if (ptype == ProxyType.CHUGSPLASH) {\\n            L1ChugSplashProxy(_proxy).setOwner(_newAdmin);\\n        } else if (ptype == ProxyType.RESOLVED) {\\n            addressManager.transferOwnership(_newAdmin);\\n        } else {\\n            revert(\\\"ProxyAdmin: unknown proxy type\\\");\\n        }\\n    }\\n\\n    /// @notice Changes a proxy's implementation contract.\\n    /// @param _proxy          Address of the proxy to upgrade.\\n    /// @param _implementation Address of the new implementation address.\\n    function upgrade(address payable _proxy, address _implementation) public onlyOwner {\\n        ProxyType ptype = proxyType[_proxy];\\n        if (ptype == ProxyType.ERC1967) {\\n            Proxy(_proxy).upgradeTo(_implementation);\\n        } else if (ptype == ProxyType.CHUGSPLASH) {\\n            L1ChugSplashProxy(_proxy).setStorage(\\n                Constants.PROXY_IMPLEMENTATION_ADDRESS, bytes32(uint256(uint160(_implementation)))\\n            );\\n        } else if (ptype == ProxyType.RESOLVED) {\\n            string memory name = implementationName[_proxy];\\n            addressManager.setAddress(name, _implementation);\\n        } else {\\n            // It should not be possible to retrieve a ProxyType value which is not matched by\\n            // one of the previous conditions.\\n            assert(false);\\n        }\\n    }\\n\\n    /// @notice Changes a proxy's implementation contract and delegatecalls the new implementation\\n    ///         with some given data. Useful for atomic upgrade-and-initialize calls.\\n    /// @param _proxy          Address of the proxy to upgrade.\\n    /// @param _implementation Address of the new implementation address.\\n    /// @param _data           Data to trigger the new implementation with.\\n    function upgradeAndCall(\\n        address payable _proxy,\\n        address _implementation,\\n        bytes memory _data\\n    )\\n        external\\n        payable\\n        onlyOwner\\n    {\\n        ProxyType ptype = proxyType[_proxy];\\n        if (ptype == ProxyType.ERC1967) {\\n            Proxy(_proxy).upgradeToAndCall{ value: msg.value }(_implementation, _data);\\n        } else {\\n            // reverts if proxy type is unknown\\n            upgrade(_proxy, _implementation);\\n            (bool success,) = _proxy.call{ value: msg.value }(_data);\\n            require(success, \\\"ProxyAdmin: call to proxy after upgrade failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0212013525d6b5516a9b8b84e3cfd158bc52a6208cd4c8b806c8a2c959cc116\",\"license\":\"MIT\"},\"contracts/universal/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice Semver is a simple contract for managing contract versions.\\ncontract Semver {\\n    /// @notice Contract version number (major).\\n    uint256 private immutable MAJOR_VERSION;\\n\\n    /// @notice Contract version number (minor).\\n    uint256 private immutable MINOR_VERSION;\\n\\n    /// @notice Contract version number (patch).\\n    uint256 private immutable PATCH_VERSION;\\n\\n    /// @param _major Version number (major).\\n    /// @param _minor Version number (minor).\\n    /// @param _patch Version number (patch).\\n    constructor(uint256 _major, uint256 _minor, uint256 _patch) {\\n        MAJOR_VERSION = _major;\\n        MINOR_VERSION = _minor;\\n        PATCH_VERSION = _patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() public view returns (string memory) {\\n        return string(\\n            abi.encodePacked(\\n                Strings.toString(MAJOR_VERSION),\\n                \\\".\\\",\\n                Strings.toString(MINOR_VERSION),\\n                \\\".\\\",\\n                Strings.toString(PATCH_VERSION)\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9de68ce536aee1aa616b4bf88d7ccc335460e6edd0e7170bdbf94c4fe3d41c60\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060016080819052600060a081905260c081905280611bd76100478239600060d60152600060ab0152600060800152611bd76000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c806354fd4d50146200003f578063c6052ed91462000061575b600080fd5b6200004962000078565b6040516200005891906200037f565b60405180910390f35b62000049620000723660046200039b565b62000123565b6060620000a57f0000000000000000000000000000000000000000000000000000000000000000620001bb565b620000d07f0000000000000000000000000000000000000000000000000000000000000000620001bb565b620000fb7f0000000000000000000000000000000000000000000000000000000000000000620001bb565b6040516020016200010f93929190620003c8565b604051602081830303815290604052905090565b606060405180602001620001379062000310565b601f1982820381018352601f9091011660408190526200015b919060200162000444565b60408051601f1981840301815282825260208301879052908201859052606082018490529060800160408051601f1981840301815290829052620001a3929160200162000462565b60405160208183030381529060405290509392505050565b606081600003620001ff57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156200022f57806200021681620004ab565b9150620002279050600a83620004dd565b915062000203565b60008167ffffffffffffffff8111156200024d576200024d620004f4565b6040519080825280601f01601f19166020018201604052801562000278576020820181803683370190505b5090505b84156200030857620002906001836200050a565b91506200029f600a8662000524565b620002ac9060306200053b565b60f81b818381518110620002c457620002c462000556565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535062000300600a86620004dd565b94506200027c565b949350505050565b611635806200056d83390190565b60005b838110156200033b57818101518382015260200162000321565b838111156200034b576000848401525b50505050565b600081518084526200036b8160208601602086016200031e565b601f01601f19169290920160200192915050565b60208152600062000394602083018462000351565b9392505050565b600080600060608486031215620003b157600080fd5b505081359360208301359350604090920135919050565b60008451620003dc8184602089016200031e565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516200041a816001850160208a016200031e565b60019201918201528351620004378160028401602088016200031e565b0160020195945050505050565b60008251620004588184602087016200031e565b9190910192915050565b60008351620004768184602088016200031e565b8351908301906200048c8183602088016200031e565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600060018201620004c057620004c062000495565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082620004ef57620004ef620004c7565b500490565b634e487b7160e01b600052604160045260246000fd5b6000828210156200051f576200051f62000495565b500390565b600082620005365762000536620004c7565b500690565b6000821982111562000551576200055162000495565b500190565b634e487b7160e01b600052603260045260246000fdfe60e06040523480156200001157600080fd5b5060405162001635380380620016358339810160408190526200003491620002f3565b60008211620000b05760405162461bcd60e51b815260206004820152603460248201527f4c324f75747075744f7261636c653a204c3220626c6f636b2074696d65206d7560448201527f73742062652067726561746572207468616e203000000000000000000000000060648201526084015b60405180910390fd5b60008311620001285760405162461bcd60e51b815260206004820152603a60248201527f4c324f75747075744f7261636c653a207375626d697373696f6e20696e74657260448201527f76616c206d7573742062652067726561746572207468616e20300000000000006064820152608401620000a7565b608083905260a082905260c08190526200014660008080806200014f565b50505062000322565b600054600290610100900460ff1615801562000172575060005460ff8083169116105b620001d75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000a7565b6000805461ffff191660ff83161761010017905542841115620002715760405162461bcd60e51b8152602060048201526044602482018190527f4c324f75747075744f7261636c653a207374617274696e67204c322074696d65908201527f7374616d70206d757374206265206c657373207468616e2063757272656e742060648201526374696d6560e01b608482015260a401620000a7565b60028490556001859055600580546001600160a01b038581166001600160a01b03199283161790925560048054928516929091169190911790556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6000806000606084860312156200030957600080fd5b8351925060208401519150604084015190509250925092565b60805160a05160c0516112b96200037c60003960008181610472015281816105300152610aa00152600081816101a101528181610392015261106601526000818161021f015281816104fa01526110b401526112b96000f3fe60806040526004361061018a5760003560e01c806389c44cbb116100d6578063ce5db8d61161007f578063dcec334811610059578063dcec3348146104d6578063e1a41bcf146104eb578063f4daa2911461051e57600080fd5b8063ce5db8d614610463578063cf8e5cf014610496578063d1de856c146104b657600080fd5b8063a25ae557116100b0578063a25ae557146103c9578063a8e4fb9014610425578063bffa7f0f1461044557600080fd5b806389c44cbb1461036357806393991af3146103835780639aaab648146103b657600080fd5b806369f16eec1161013857806370872aa51161011257806370872aa5146103175780637f0064201461032d578063887862721461034d57600080fd5b806369f16eec146102cf5780636abcf563146102e45780636b4d98dd146102f957600080fd5b8063529933df11610169578063529933df1461020d578063534db0e21461024157806354fd4d501461027957600080fd5b80622134cc1461018f578063019e2729146101d65780634599c788146101f8575b600080fd5b34801561019b57600080fd5b506101c37f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b3480156101e257600080fd5b506101f66101f1366004611101565b610552565b005b34801561020457600080fd5b506101c3610736565b34801561021957600080fd5b506101c37f000000000000000000000000000000000000000000000000000000000000000081565b34801561024d57600080fd5b50600454610261906001600160a01b031681565b6040516001600160a01b0390911681526020016101cd565b34801561028557600080fd5b506102c26040518060400160405280600581526020017f312e352e3000000000000000000000000000000000000000000000000000000081525081565b6040516101cd9190611147565b3480156102db57600080fd5b506101c361079c565b3480156102f057600080fd5b506003546101c3565b34801561030557600080fd5b506004546001600160a01b0316610261565b34801561032357600080fd5b506101c360015481565b34801561033957600080fd5b506101c361034836600461119c565b6107ae565b34801561035957600080fd5b506101c360025481565b34801561036f57600080fd5b506101f661037e36600461119c565b610981565b34801561038f57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101c3565b6101f66103c43660046111b5565b610bde565b3480156103d557600080fd5b506103e96103e436600461119c565b610fa3565b60408051825181526020808401516fffffffffffffffffffffffffffffffff9081169183019190915292820151909216908201526060016101cd565b34801561043157600080fd5b50600554610261906001600160a01b031681565b34801561045157600080fd5b506005546001600160a01b0316610261565b34801561046f57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101c3565b3480156104a257600080fd5b506103e96104b136600461119c565b61102a565b3480156104c257600080fd5b506101c36104d136600461119c565b611062565b3480156104e257600080fd5b506101c36110b0565b3480156104f757600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101c3565b34801561052a57600080fd5b506101c37f000000000000000000000000000000000000000000000000000000000000000081565b600054600290610100900460ff16158015610574575060005460ff8083169116105b6105eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805461ffff191660ff8316176101001790554284111561069c5760405162461bcd60e51b8152602060048201526044602482018190527f4c324f75747075744f7261636c653a207374617274696e67204c322074696d65908201527f7374616d70206d757374206265206c657373207468616e2063757272656e742060648201527f74696d6500000000000000000000000000000000000000000000000000000000608482015260a4016105e2565b60028490556001859055600580546001600160a01b038581167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560048054928516929091169190911790556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b600354600090156107935760038054610751906001906111fd565b8154811061076157610761611214565b6000918252602090912060029091020160010154600160801b90046fffffffffffffffffffffffffffffffff16919050565b6001545b905090565b600354600090610797906001906111fd565b60006107b8610736565b8211156108535760405162461bcd60e51b815260206004820152604860248201527f4c324f75747075744f7261636c653a2063616e6e6f7420676574206f7574707560448201527f7420666f72206120626c6f636b207468617420686173206e6f74206265656e2060648201527f70726f706f736564000000000000000000000000000000000000000000000000608482015260a4016105e2565b6003546108ee5760405162461bcd60e51b815260206004820152604660248201527f4c324f75747075744f7261636c653a2063616e6e6f7420676574206f7574707560448201527f74206173206e6f206f7574707574732068617665206265656e2070726f706f7360648201527f6564207965740000000000000000000000000000000000000000000000000000608482015260a4016105e2565b6003546000905b8082101561097a576000600261090b838561122a565b6109159190611242565b9050846003828154811061092b5761092b611214565b6000918252602090912060029091020160010154600160801b90046fffffffffffffffffffffffffffffffff1610156109705761096981600161122a565b9250610974565b8091505b506108f5565b5092915050565b6004546001600160a01b03163314610a015760405162461bcd60e51b815260206004820152603e60248201527f4c324f75747075744f7261636c653a206f6e6c7920746865206368616c6c656e60448201527f67657220616464726573732063616e2064656c657465206f757470757473000060648201526084016105e2565b6003548110610a9e5760405162461bcd60e51b815260206004820152604360248201527f4c324f75747075744f7261636c653a2063616e6e6f742064656c657465206f7560448201527f747075747320616674657220746865206c6174657374206f757470757420696e60648201527f6465780000000000000000000000000000000000000000000000000000000000608482015260a4016105e2565b7f000000000000000000000000000000000000000000000000000000000000000060038281548110610ad257610ad2611214565b6000918252602090912060016002909202010154610b02906fffffffffffffffffffffffffffffffff16426111fd565b10610b9b5760405162461bcd60e51b815260206004820152604660248201527f4c324f75747075744f7261636c653a2063616e6e6f742064656c657465206f7560448201527f74707574732074686174206861766520616c7265616479206265656e2066696e60648201527f616c697a65640000000000000000000000000000000000000000000000000000608482015260a4016105e2565b6000610ba660035490565b90508160035581817f4ee37ac2c786ec85e87592d3c5c8a1dd66f8496dda3f125d9ea8ca5f657629b660405160405180910390a35050565b6005546001600160a01b03163314610c845760405162461bcd60e51b815260206004820152604160248201527f4c324f75747075744f7261636c653a206f6e6c79207468652070726f706f736560448201527f7220616464726573732063616e2070726f706f7365206e6577206f757470757460648201527f7300000000000000000000000000000000000000000000000000000000000000608482015260a4016105e2565b610c8c6110b0565b8314610d265760405162461bcd60e51b815260206004820152604860248201527f4c324f75747075744f7261636c653a20626c6f636b206e756d626572206d757360448201527f7420626520657175616c20746f206e65787420657870656374656420626c6f6360648201527f6b206e756d626572000000000000000000000000000000000000000000000000608482015260a4016105e2565b42610d3084611062565b10610da35760405162461bcd60e51b815260206004820152603660248201527f4c324f75747075744f7261636c653a2063616e6e6f742070726f706f7365204c60448201527f32206f757470757420696e20746865206675747572650000000000000000000060648201526084016105e2565b83610e165760405162461bcd60e51b815260206004820152603a60248201527f4c324f75747075744f7261636c653a204c32206f75747075742070726f706f7360448201527f616c2063616e6e6f7420626520746865207a65726f206861736800000000000060648201526084016105e2565b8115610eb85781814014610eb85760405162461bcd60e51b815260206004820152604960248201527f4c324f75747075744f7261636c653a20626c6f636b206861736820646f65732060448201527f6e6f74206d61746368207468652068617368206174207468652065787065637460648201527f6564206865696768740000000000000000000000000000000000000000000000608482015260a4016105e2565b82610ec260035490565b857fa7aaf2512769da4e444e3de247be2564225c2e7a8f74cfe528e46e17d24868e242604051610ef491815260200190565b60405180910390a45050604080516060810182529283526fffffffffffffffffffffffffffffffff4281166020850190815292811691840191825260038054600181018255600091909152935160029094027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810194909455915190518216600160801b029116177fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c90910155565b604080516060810182526000808252602082018190529181019190915260038281548110610fd357610fd3611214565b600091825260209182902060408051606081018252600290930290910180548352600101546fffffffffffffffffffffffffffffffff80821694840194909452600160801b90049092169181019190915292915050565b60408051606081018252600080825260208201819052918101919091526003611052836107ae565b81548110610fd357610fd3611214565b60007f00000000000000000000000000000000000000000000000000000000000000006001548361109391906111fd565b61109d9190611264565b6002546110aa919061122a565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006110db610736565b610797919061122a565b80356001600160a01b03811681146110fc57600080fd5b919050565b6000806000806080858703121561111757600080fd5b843593506020850135925061112e604086016110e5565b915061113c606086016110e5565b905092959194509250565b600060208083528351808285015260005b8181101561117457858101830151858201604001528201611158565b81811115611186576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156111ae57600080fd5b5035919050565b600080600080608085870312156111cb57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b60008282101561120f5761120f6111e7565b500390565b634e487b7160e01b600052603260045260246000fd5b6000821982111561123d5761123d6111e7565b500190565b60008261125f57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561127e5761127e6111e7565b50029056fea2646970667358221220e988397a156a503f54f31141baf470b00800b7701c926a8b7269e66ba6ab5a9664736f6c634300080f0033a2646970667358221220ffe59578dac93850f89d8d3ab9c1d3042b06972eb1f12d7b23cf91a77c68531c64736f6c634300080f0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200003a5760003560e01c806354fd4d50146200003f578063c6052ed91462000061575b600080fd5b6200004962000078565b6040516200005891906200037f565b60405180910390f35b62000049620000723660046200039b565b62000123565b6060620000a57f0000000000000000000000000000000000000000000000000000000000000000620001bb565b620000d07f0000000000000000000000000000000000000000000000000000000000000000620001bb565b620000fb7f0000000000000000000000000000000000000000000000000000000000000000620001bb565b6040516020016200010f93929190620003c8565b604051602081830303815290604052905090565b606060405180602001620001379062000310565b601f1982820381018352601f9091011660408190526200015b919060200162000444565b60408051601f1981840301815282825260208301879052908201859052606082018490529060800160408051601f1981840301815290829052620001a3929160200162000462565b60405160208183030381529060405290509392505050565b606081600003620001ff57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156200022f57806200021681620004ab565b9150620002279050600a83620004dd565b915062000203565b60008167ffffffffffffffff8111156200024d576200024d620004f4565b6040519080825280601f01601f19166020018201604052801562000278576020820181803683370190505b5090505b84156200030857620002906001836200050a565b91506200029f600a8662000524565b620002ac9060306200053b565b60f81b818381518110620002c457620002c462000556565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535062000300600a86620004dd565b94506200027c565b949350505050565b611635806200056d83390190565b60005b838110156200033b57818101518382015260200162000321565b838111156200034b576000848401525b50505050565b600081518084526200036b8160208601602086016200031e565b601f01601f19169290920160200192915050565b60208152600062000394602083018462000351565b9392505050565b600080600060608486031215620003b157600080fd5b505081359360208301359350604090920135919050565b60008451620003dc8184602089016200031e565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516200041a816001850160208a016200031e565b60019201918201528351620004378160028401602088016200031e565b0160020195945050505050565b60008251620004588184602087016200031e565b9190910192915050565b60008351620004768184602088016200031e565b8351908301906200048c8183602088016200031e565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600060018201620004c057620004c062000495565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082620004ef57620004ef620004c7565b500490565b634e487b7160e01b600052604160045260246000fd5b6000828210156200051f576200051f62000495565b500390565b600082620005365762000536620004c7565b500690565b6000821982111562000551576200055162000495565b500190565b634e487b7160e01b600052603260045260246000fdfe60e06040523480156200001157600080fd5b5060405162001635380380620016358339810160408190526200003491620002f3565b60008211620000b05760405162461bcd60e51b815260206004820152603460248201527f4c324f75747075744f7261636c653a204c3220626c6f636b2074696d65206d7560448201527f73742062652067726561746572207468616e203000000000000000000000000060648201526084015b60405180910390fd5b60008311620001285760405162461bcd60e51b815260206004820152603a60248201527f4c324f75747075744f7261636c653a207375626d697373696f6e20696e74657260448201527f76616c206d7573742062652067726561746572207468616e20300000000000006064820152608401620000a7565b608083905260a082905260c08190526200014660008080806200014f565b50505062000322565b600054600290610100900460ff1615801562000172575060005460ff8083169116105b620001d75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000a7565b6000805461ffff191660ff83161761010017905542841115620002715760405162461bcd60e51b8152602060048201526044602482018190527f4c324f75747075744f7261636c653a207374617274696e67204c322074696d65908201527f7374616d70206d757374206265206c657373207468616e2063757272656e742060648201526374696d6560e01b608482015260a401620000a7565b60028490556001859055600580546001600160a01b038581166001600160a01b03199283161790925560048054928516929091169190911790556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6000806000606084860312156200030957600080fd5b8351925060208401519150604084015190509250925092565b60805160a05160c0516112b96200037c60003960008181610472015281816105300152610aa00152600081816101a101528181610392015261106601526000818161021f015281816104fa01526110b401526112b96000f3fe60806040526004361061018a5760003560e01c806389c44cbb116100d6578063ce5db8d61161007f578063dcec334811610059578063dcec3348146104d6578063e1a41bcf146104eb578063f4daa2911461051e57600080fd5b8063ce5db8d614610463578063cf8e5cf014610496578063d1de856c146104b657600080fd5b8063a25ae557116100b0578063a25ae557146103c9578063a8e4fb9014610425578063bffa7f0f1461044557600080fd5b806389c44cbb1461036357806393991af3146103835780639aaab648146103b657600080fd5b806369f16eec1161013857806370872aa51161011257806370872aa5146103175780637f0064201461032d578063887862721461034d57600080fd5b806369f16eec146102cf5780636abcf563146102e45780636b4d98dd146102f957600080fd5b8063529933df11610169578063529933df1461020d578063534db0e21461024157806354fd4d501461027957600080fd5b80622134cc1461018f578063019e2729146101d65780634599c788146101f8575b600080fd5b34801561019b57600080fd5b506101c37f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b3480156101e257600080fd5b506101f66101f1366004611101565b610552565b005b34801561020457600080fd5b506101c3610736565b34801561021957600080fd5b506101c37f000000000000000000000000000000000000000000000000000000000000000081565b34801561024d57600080fd5b50600454610261906001600160a01b031681565b6040516001600160a01b0390911681526020016101cd565b34801561028557600080fd5b506102c26040518060400160405280600581526020017f312e352e3000000000000000000000000000000000000000000000000000000081525081565b6040516101cd9190611147565b3480156102db57600080fd5b506101c361079c565b3480156102f057600080fd5b506003546101c3565b34801561030557600080fd5b506004546001600160a01b0316610261565b34801561032357600080fd5b506101c360015481565b34801561033957600080fd5b506101c361034836600461119c565b6107ae565b34801561035957600080fd5b506101c360025481565b34801561036f57600080fd5b506101f661037e36600461119c565b610981565b34801561038f57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101c3565b6101f66103c43660046111b5565b610bde565b3480156103d557600080fd5b506103e96103e436600461119c565b610fa3565b60408051825181526020808401516fffffffffffffffffffffffffffffffff9081169183019190915292820151909216908201526060016101cd565b34801561043157600080fd5b50600554610261906001600160a01b031681565b34801561045157600080fd5b506005546001600160a01b0316610261565b34801561046f57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101c3565b3480156104a257600080fd5b506103e96104b136600461119c565b61102a565b3480156104c257600080fd5b506101c36104d136600461119c565b611062565b3480156104e257600080fd5b506101c36110b0565b3480156104f757600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101c3565b34801561052a57600080fd5b506101c37f000000000000000000000000000000000000000000000000000000000000000081565b600054600290610100900460ff16158015610574575060005460ff8083169116105b6105eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805461ffff191660ff8316176101001790554284111561069c5760405162461bcd60e51b8152602060048201526044602482018190527f4c324f75747075744f7261636c653a207374617274696e67204c322074696d65908201527f7374616d70206d757374206265206c657373207468616e2063757272656e742060648201527f74696d6500000000000000000000000000000000000000000000000000000000608482015260a4016105e2565b60028490556001859055600580546001600160a01b038581167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560048054928516929091169190911790556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b600354600090156107935760038054610751906001906111fd565b8154811061076157610761611214565b6000918252602090912060029091020160010154600160801b90046fffffffffffffffffffffffffffffffff16919050565b6001545b905090565b600354600090610797906001906111fd565b60006107b8610736565b8211156108535760405162461bcd60e51b815260206004820152604860248201527f4c324f75747075744f7261636c653a2063616e6e6f7420676574206f7574707560448201527f7420666f72206120626c6f636b207468617420686173206e6f74206265656e2060648201527f70726f706f736564000000000000000000000000000000000000000000000000608482015260a4016105e2565b6003546108ee5760405162461bcd60e51b815260206004820152604660248201527f4c324f75747075744f7261636c653a2063616e6e6f7420676574206f7574707560448201527f74206173206e6f206f7574707574732068617665206265656e2070726f706f7360648201527f6564207965740000000000000000000000000000000000000000000000000000608482015260a4016105e2565b6003546000905b8082101561097a576000600261090b838561122a565b6109159190611242565b9050846003828154811061092b5761092b611214565b6000918252602090912060029091020160010154600160801b90046fffffffffffffffffffffffffffffffff1610156109705761096981600161122a565b9250610974565b8091505b506108f5565b5092915050565b6004546001600160a01b03163314610a015760405162461bcd60e51b815260206004820152603e60248201527f4c324f75747075744f7261636c653a206f6e6c7920746865206368616c6c656e60448201527f67657220616464726573732063616e2064656c657465206f757470757473000060648201526084016105e2565b6003548110610a9e5760405162461bcd60e51b815260206004820152604360248201527f4c324f75747075744f7261636c653a2063616e6e6f742064656c657465206f7560448201527f747075747320616674657220746865206c6174657374206f757470757420696e60648201527f6465780000000000000000000000000000000000000000000000000000000000608482015260a4016105e2565b7f000000000000000000000000000000000000000000000000000000000000000060038281548110610ad257610ad2611214565b6000918252602090912060016002909202010154610b02906fffffffffffffffffffffffffffffffff16426111fd565b10610b9b5760405162461bcd60e51b815260206004820152604660248201527f4c324f75747075744f7261636c653a2063616e6e6f742064656c657465206f7560448201527f74707574732074686174206861766520616c7265616479206265656e2066696e60648201527f616c697a65640000000000000000000000000000000000000000000000000000608482015260a4016105e2565b6000610ba660035490565b90508160035581817f4ee37ac2c786ec85e87592d3c5c8a1dd66f8496dda3f125d9ea8ca5f657629b660405160405180910390a35050565b6005546001600160a01b03163314610c845760405162461bcd60e51b815260206004820152604160248201527f4c324f75747075744f7261636c653a206f6e6c79207468652070726f706f736560448201527f7220616464726573732063616e2070726f706f7365206e6577206f757470757460648201527f7300000000000000000000000000000000000000000000000000000000000000608482015260a4016105e2565b610c8c6110b0565b8314610d265760405162461bcd60e51b815260206004820152604860248201527f4c324f75747075744f7261636c653a20626c6f636b206e756d626572206d757360448201527f7420626520657175616c20746f206e65787420657870656374656420626c6f6360648201527f6b206e756d626572000000000000000000000000000000000000000000000000608482015260a4016105e2565b42610d3084611062565b10610da35760405162461bcd60e51b815260206004820152603660248201527f4c324f75747075744f7261636c653a2063616e6e6f742070726f706f7365204c60448201527f32206f757470757420696e20746865206675747572650000000000000000000060648201526084016105e2565b83610e165760405162461bcd60e51b815260206004820152603a60248201527f4c324f75747075744f7261636c653a204c32206f75747075742070726f706f7360448201527f616c2063616e6e6f7420626520746865207a65726f206861736800000000000060648201526084016105e2565b8115610eb85781814014610eb85760405162461bcd60e51b815260206004820152604960248201527f4c324f75747075744f7261636c653a20626c6f636b206861736820646f65732060448201527f6e6f74206d61746368207468652068617368206174207468652065787065637460648201527f6564206865696768740000000000000000000000000000000000000000000000608482015260a4016105e2565b82610ec260035490565b857fa7aaf2512769da4e444e3de247be2564225c2e7a8f74cfe528e46e17d24868e242604051610ef491815260200190565b60405180910390a45050604080516060810182529283526fffffffffffffffffffffffffffffffff4281166020850190815292811691840191825260038054600181018255600091909152935160029094027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810194909455915190518216600160801b029116177fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c90910155565b604080516060810182526000808252602082018190529181019190915260038281548110610fd357610fd3611214565b600091825260209182902060408051606081018252600290930290910180548352600101546fffffffffffffffffffffffffffffffff80821694840194909452600160801b90049092169181019190915292915050565b60408051606081018252600080825260208201819052918101919091526003611052836107ae565b81548110610fd357610fd3611214565b60007f00000000000000000000000000000000000000000000000000000000000000006001548361109391906111fd565b61109d9190611264565b6002546110aa919061122a565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006110db610736565b610797919061122a565b80356001600160a01b03811681146110fc57600080fd5b919050565b6000806000806080858703121561111757600080fd5b843593506020850135925061112e604086016110e5565b915061113c606086016110e5565b905092959194509250565b600060208083528351808285015260005b8181101561117457858101830151858201604001528201611158565b81811115611186576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156111ae57600080fd5b5035919050565b600080600080608085870312156111cb57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b60008282101561120f5761120f6111e7565b500390565b634e487b7160e01b600052603260045260246000fd5b6000821982111561123d5761123d6111e7565b500190565b60008261125f57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561127e5761127e6111e7565b50029056fea2646970667358221220e988397a156a503f54f31141baf470b00800b7701c926a8b7269e66ba6ab5a9664736f6c634300080f0033a2646970667358221220ffe59578dac93850f89d8d3ab9c1d3042b06972eb1f12d7b23cf91a77c68531c64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployBytecode(uint256,uint256,uint256)": {
        "notice": "The create2 salt used for deployment of the contract implementations."
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "notice": "Hold the deployment bytecode         Separate from build contract to avoid bytecode size limitations",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}